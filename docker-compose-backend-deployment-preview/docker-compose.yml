version: '3.3'

services:
  redis:
    # Adjust the build context to your needs targetting the created Dockerfile
    container_name: redis
    image: redis:alpine
    restart: always
    ports:
      - 6379:6379
    # Run as privileged to allow the container to change the vm.overcommit_memory setting
    privileged: true
    volumes:
      - ./docker/data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: prodcontrol-pgbouncer
    env_file:
      - .env
    environment:
      # Database connections (replace with your actual values)
      DATABASES_HOST: ${DB_HOST}
      DATABASES_PORT: ${DB_PORT}
      DATABASES_USER: ${DB_USER}
      DATABASES_PASSWORD: ${DB_PASSWORD}
      DATABASES_DBNAME: ${DB}
      
      # PgBouncer Configuration - optimized for migrations and high concurrency
      POOL_MODE: session      # Required for migrations - maintains session state
      DEFAULT_POOL_SIZE: 50   # Connections per database pool
      MIN_POOL_SIZE: 10       # Minimum connections kept open
      RESERVE_POOL_SIZE: 5    # Emergency connections
      RESERVE_POOL_TIMEOUT: 3 # Seconds to wait for reserve pool
      MAX_CLIENT_CONN: 2000   # Maximum client connections
      MAX_DB_CONNECTIONS: 100 # Maximum database connections total
      
      # Multi-tenant SAAS friendly settings
      SERVER_RESET_QUERY: ""  # Don't reset session state
      SERVER_RESET_QUERY_ALWAYS: 0  # Never send reset queries
      IGNORE_STARTUP_PARAMETERS: "extra_float_digits,search_path,application_name"
      APPLICATION_NAME_ADD_HOST: 1  # Help track connections
      
      # Timeouts - more permissive for migrations
      SERVER_CHECK_DELAY: 30
      SERVER_CHECK_QUERY: select 1
      SERVER_LIFETIME: 3600   # 1 hour connection lifetime
      SERVER_IDLE_TIMEOUT: 600 # 10 minutes idle timeout
      QUERY_TIMEOUT: 300      # 5 minutes for complex migration queries
      CLIENT_IDLE_TIMEOUT: 120 # 2 minutes client idle timeout
      
      # Logging
      LOG_CONNECTIONS: 0
      LOG_DISCONNECTIONS: 0
      LOG_POOLER_ERRORS: 1
      LOG_STATS: 0
      VERBOSE: 0
      
    ports:
      - "6432:5432"  # PgBouncer port
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 6432"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    image: jlucasamorim/prodsistem-preview:latest
    ports:
      - "8080:8080"
    restart: always
    env_file:
      - .env
    environment:
      DB_HOST: pgbouncer
      DB_PORT: 6432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PORT: 8080
    depends_on:
      pgbouncer:
        condition: service_healthy 
      redis:
        condition: service_healthy
